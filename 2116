2116. Check if a Parentheses String Can Be Valid

class Solution {
public:
    bool canBeValid(string s, string locked) {
         int n = s.length();
        if (n % 2 != 0) return false; 

    
        int balance = 0, wildcards = 0;
        for (int i = 0; i < n; ++i) {
            if (locked[i] == '0') {
                ++wildcards;
        }   else if (s[i] == '(') {
                ++balance;
        }   else {
                --balance;
        }
            if (balance + wildcards < 0) return false;
    }

    
        balance = 0, wildcards = 0;
        for (int i = n - 1; i >= 0; --i) {
            if (locked[i] == '0') {
                ++wildcards;
        }   else if (s[i] == ')') {
                ++balance;
        }   else { 
                --balance;
        }
            if (balance + wildcards < 0) return false;
    }

    return true;
        
    }
};


2nd appproach using stack


class Solution {
public:
    bool canBeValid(string s, string locked) {
        int n = s.length();

        if(n%2 != 0) { //odd
            return false;
        }

        stack<int> open;
        stack<int> openClose;

        for(int i = 0; i < n; i++) {
            if(locked[i] == '0') {
                openClose.push(i);
            } else if(s[i] == '(') {
                open.push(i);
            } else if(s[i] == ')') {
                if(!open.empty()) {
                    open.pop();
                } else if(!openClose.empty()) {
                    openClose.pop();
                } else {
                    return false;
                }
            }
        }

        while(!open.empty() && !openClose.empty() && open.top() < openClose.top()) {
            open.pop();
            openClose.pop();
        }


        return open.empty(); //true

    }
};
